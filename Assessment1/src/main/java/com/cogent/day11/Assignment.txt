

Create class Contact with following fields

String name
int contact number
String addressLine
Date dateOfBirth  (LocalDate / java.sql.Date)


boolean  isValid(Contact cnt) throws InvalidContactDetailsException
  -- Validation Rules all fields values must be present 
  
  
provide default and parameter constructor for contact class



create class ContactService class which will allow you to store at 10 contact

add following methods
- public boolean addContact(Contact cnt)
- public boolean searchContact(Contact cnt)
- public void printAllContacts() 


create Contact Tester class






1)Explain User defined Exception ,Explain with example How it can be thrown.
The keyword throw is used to manually raise an exception

if(name.isEmpty()||contactNumber==0||addressLine.isEmpty()||dateOfBirth==null) {
			throw new InvalidContactDetailsException("is Required all fields must be completed");

2)Explain difference between equals and == ,How it works.

We can use == operators for reference comparison (address comparison) and .equals() method for content comparison. 
In simple words, == checks if both objects point to the same memory location whereas .equals() evaluates to 
the comparison of values in the objects.

3)What is use of toString() method.

It returns a String value of its object.

4)Explain Object class and its predefined methods.

getClass() returns the runtime class of an object
hashCode() returns an integer value, generated by a hashing algorithm
toString() method returns the String representation of the object
equals() method compares two objects, and returns true if the strings are equal

5)List class and methods supporting Date in Java.
 java.sql.Data
 java.util.Data
 java.time.LocalDate;

6)What is Scanner class explain with example.

The Scanner class is used to get user input, and it is found in the java.util package.
To use the Scanner class, create an object of the class and use any of the available methods found in the Scanner

Scanner sc = new Scanner(System.in);
String name = sc.next();

7)What is Hashcode and overriding of hashcode explain with example.

is a function that returns the hashcode value of an object on calling. 
It returns an integer or a 4 bytes value which is generated by the hashing algorithm.

@Override
public int hashCode() {
    int hash = 7;
    hash = 31 * hash + (int) id;
    hash = 31 * hash + (name == null ? 0 : name.hashCode());
    hash = 31 * hash + (email == null ? 0 : email.hashCode());
    return hash;
}












